{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Git Lab... not GitLab ... \u00b6 This doc assumes a few things You're on a Mac or Linux environment If you're running windows, you CAN either run docker or tryout WSLv2! docker run -it --rm ubuntu as an example setup your SSH Keys and then you can git at it... (Sorry, I couldn't help myself) You have git installed in some capacity. You have a GitHub account You've setup SSH Keys for that account on your local machine If you haven't done this, please visit SETUP for SSH setup Overview \u00b6 Alright, so you feel like messing around with some git ?! You don't NEED GitHub (or GitLab) for that, you can toy around with most of git right on your command-line. First, make sure you have git installed ( you likely do ) \u2570\u2500 which git /usr/bin/git \u2570\u2500 git usage: git [ --version ] [ --help ] [ -C <path> ] [ -c <name> = <value> ] [ --exec-path [= <path> ]] [ --html-path ] [ --man-path ] [ --info-path ] [ -p | --paginate | -P | --no-pager ] [ --no-replace-objects ] [ --bare ] [ --git-dir = <path> ] [ --work-tree = <path> ] [ --namespace = <name> ] <command> [ <args> ] No Git? If you have no git installed, please check out how to do that for your respective Operating System: * Git Downloads Next up I'm gonna have some tasks that you'll want to step through and see if you can complete. Before we go on I'd like to point you to some reading materials or references; use them how you like. Recommended Reading Git SCM This is THE book, the resource of resources Learn Git in Y Minutes This is Cliff/Spark Notes for git Tasks to Try \u00b6 Basics \u00b6 Clone this repository ( git clone ) Checkout a new branch, be short, but descriptive when naming a branch. ( git checkout ) Add A File, name it what you like, be creative. Run git status note what you see... Stage/Commit that new File, don't forget a commite message! Highly recommend reading this: How To Write a Commit Message Edit file1.txt to say something other than what it does. Stage/Commit these changes Make sure that commit message is clear Push your changes to the remote branch from your local Open a Pull Request Get Approval Merge Pull Request Things to try \u00b6 After you modify file1.txt play around with git diff After you've made a few commits see what git log does Change the content of file2.txt but don't commit. How can we revert this? ( git checkout ) Once you've done the above steps, delete the repository locally, and try Forking the repo(on github) Take note of what happens when you do that How is cloning different now? Repeat the above \"Things to do\" Tasks with your fork. Take note of how this is different. Handling Conflicts \u00b6 Other Docs \u00b6 How To Write a Commit Message DevOps Git Commit Best Practices DevOps Pull Request Best Practices","title":"Welcome"},{"location":"#a-git-lab-not-gitlab","text":"This doc assumes a few things You're on a Mac or Linux environment If you're running windows, you CAN either run docker or tryout WSLv2! docker run -it --rm ubuntu as an example setup your SSH Keys and then you can git at it... (Sorry, I couldn't help myself) You have git installed in some capacity. You have a GitHub account You've setup SSH Keys for that account on your local machine If you haven't done this, please visit SETUP for SSH setup","title":"A Git Lab... not GitLab ..."},{"location":"#overview","text":"Alright, so you feel like messing around with some git ?! You don't NEED GitHub (or GitLab) for that, you can toy around with most of git right on your command-line. First, make sure you have git installed ( you likely do ) \u2570\u2500 which git /usr/bin/git \u2570\u2500 git usage: git [ --version ] [ --help ] [ -C <path> ] [ -c <name> = <value> ] [ --exec-path [= <path> ]] [ --html-path ] [ --man-path ] [ --info-path ] [ -p | --paginate | -P | --no-pager ] [ --no-replace-objects ] [ --bare ] [ --git-dir = <path> ] [ --work-tree = <path> ] [ --namespace = <name> ] <command> [ <args> ] No Git? If you have no git installed, please check out how to do that for your respective Operating System: * Git Downloads Next up I'm gonna have some tasks that you'll want to step through and see if you can complete. Before we go on I'd like to point you to some reading materials or references; use them how you like. Recommended Reading Git SCM This is THE book, the resource of resources Learn Git in Y Minutes This is Cliff/Spark Notes for git","title":"Overview"},{"location":"#tasks-to-try","text":"","title":"Tasks to Try"},{"location":"#basics","text":"Clone this repository ( git clone ) Checkout a new branch, be short, but descriptive when naming a branch. ( git checkout ) Add A File, name it what you like, be creative. Run git status note what you see... Stage/Commit that new File, don't forget a commite message! Highly recommend reading this: How To Write a Commit Message Edit file1.txt to say something other than what it does. Stage/Commit these changes Make sure that commit message is clear Push your changes to the remote branch from your local Open a Pull Request Get Approval Merge Pull Request","title":"Basics"},{"location":"#things-to-try","text":"After you modify file1.txt play around with git diff After you've made a few commits see what git log does Change the content of file2.txt but don't commit. How can we revert this? ( git checkout ) Once you've done the above steps, delete the repository locally, and try Forking the repo(on github) Take note of what happens when you do that How is cloning different now? Repeat the above \"Things to do\" Tasks with your fork. Take note of how this is different.","title":"Things to try"},{"location":"#handling-conflicts","text":"","title":"Handling Conflicts"},{"location":"#other-docs","text":"How To Write a Commit Message DevOps Git Commit Best Practices DevOps Pull Request Best Practices","title":"Other Docs"},{"location":"SETUP/","text":"Setting up Git for Github \u00b6 This is a quick overview. More information can be found here: Connecting to GitHub with SSH git config \u00b6 At a minimum please make sure you setup: git config --global user.name \"Your Name\" git config --global user.email \"your.email@domain.com\" If you have SSH Keys already \u00b6 This assumes you already have an SSH Key and it's added to the SSH Agent. Copy the Contents of your SSH Key ( .pub ) NEVER EVER COPY OR TRANSMIT YOUR PRIVATE KEY (that's the one without the .pub extension) Go to https://github.com/settings/profile Login Navigate to SSH and GPG Keys Click New SSH Key Enter a Name for it so you can Identify it later in Title Paste the contents of your .pub Click Add SSH Key Then follow: Testing your SSH Connection More Info: [Adding a new SSH key to your GitHub account][github-add-keys] If you don't have SSH Keys Already \u00b6 Well if you don't already have an SSH Key... you best follow the Github Docs. Starting with: Generating a new SSH key and adding it to the ssh-agent","title":"Setting up Git for Github"},{"location":"SETUP/#setting-up-git-for-github","text":"This is a quick overview. More information can be found here: Connecting to GitHub with SSH","title":"Setting up Git for Github"},{"location":"SETUP/#git-config","text":"At a minimum please make sure you setup: git config --global user.name \"Your Name\" git config --global user.email \"your.email@domain.com\"","title":"git config"},{"location":"SETUP/#if-you-have-ssh-keys-already","text":"This assumes you already have an SSH Key and it's added to the SSH Agent. Copy the Contents of your SSH Key ( .pub ) NEVER EVER COPY OR TRANSMIT YOUR PRIVATE KEY (that's the one without the .pub extension) Go to https://github.com/settings/profile Login Navigate to SSH and GPG Keys Click New SSH Key Enter a Name for it so you can Identify it later in Title Paste the contents of your .pub Click Add SSH Key Then follow: Testing your SSH Connection More Info: [Adding a new SSH key to your GitHub account][github-add-keys]","title":"If you have SSH Keys already"},{"location":"SETUP/#if-you-dont-have-ssh-keys-already","text":"Well if you don't already have an SSH Key... you best follow the Github Docs. Starting with: Generating a new SSH key and adding it to the ssh-agent","title":"If you don't have SSH Keys Already"}]}